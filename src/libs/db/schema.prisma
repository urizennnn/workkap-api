datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RegistrationMethod {
  COMBINATION
  GOOGLE
  FACEBOOK
  APPLE
}

enum PaymentMethod {
  PAYPAL
  VISA_CARD
  MASTER_CARD
  BANK_TRANSFER
}

enum OrderStatus {
  ACTIVE
  PENDING
  COMPLETED
  LATE
  CANCELLED
}

enum PackageTier {
  BASIC
  STANDARD
  PREMIUM
}

enum GigStatus {
  ACTIVE
  PENDING
  REQUIRES_MODIFICATION
  DRAFT
  DENIED
  PAUSED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum SubscriptionPlan {
  BASIC
  STARTUP
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  STALE
  INACTIVE
}

enum FreelancerLevel {
  NEW_SELLER
  RISING_TALENT
  PRO_SELLER
  TOP_RATED
  ELITE_SELLER
}

model User {
  id                   String              @id @default(uuid())
  email                String?             @unique
  password             String?
  country              String?
  username             String?             @unique
  fullName             String?
  about                String?
  language             String?
  isVerified           Boolean             @default(false)
  subscriptionPlan     SubscriptionPlan?   @default(BASIC)
  subscriptionStatus   SubscriptionStatus? @default(STALE)
  nextSubscriptionDate DateTime?
  registrationMethod   RegistrationMethod  @default(COMBINATION)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  Freelancer           Freelancer?
  Client               Client?
  subscriptions        Subscription[]

  @@map("users")
}

model Freelancer {
  id                String          @id @default(uuid())
  uid               String          @unique
  profilePictureUrl String?
  user              User            @relation(fields: [uid], references: [id])
  rating            Float           @default(0)
  skills            String[]        @default([])
  certifications    String[]        @default([])
  education         String[]        @default([])
  gigs              Gig[]
  Order             Order[]
  jobsCompleted     Int             @default(0)
  level             FreelancerLevel @default(NEW_SELLER)
  newSeller         Boolean         @default(true)

  @@map("freelancers")
}

model Client {
  id                String  @id @default(uuid())
  uid               String  @unique
  user              User    @relation(fields: [uid], references: [id])
  profilePictureUrl String?
  Order             Order[]

  @@map("clients")
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan
  status    SubscriptionStatus
  expiry    DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@map("subscriptions")
}

model Gig {
  id                  String         @id @default(uuid())
  slug                String         @unique @default(uuid())
  userId              String
  user                Freelancer     @relation(fields: [userId], references: [id])
  title               String
  mainCategory        String
  subCategory         String
  tools               String[]       @default([])
  status              GigStatus      @default(DRAFT)
  tags                String[]       @default([])
  description         String?        @default("") @db.VarChar(1000)
  packages            GigPackage[]
  extras              ExtraService[]
  questions           Question[]
  media               MediaItem[]
  thirdPartyAgreement Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  Order               Order[]

  @@map("gigs")
}

model GigPackage {
  id                String      @id @default(uuid())
  gigId             String
  gig               Gig         @relation(fields: [gigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tier              PackageTier
  name              String
  description       String?     @default("") @db.VarChar(500)
  deliveryTime      String
  customAssetDesign Boolean     @default(false)
  sourceFile        Boolean     @default(false)
  contentUpload     Boolean     @default(false)
  convertToHtmlCss  Boolean     @default(false)
  revisions         Int         @default(0)
  price             Decimal     @db.Decimal(10, 2)
  totalPrice        Decimal     @db.Decimal(10, 2)
}

model ExtraService {
  id           String  @id @default(uuid())
  gigId        String
  gig          Gig     @relation(fields: [gigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  deliveryTime String
  price        Decimal @db.Decimal(10, 2)
}

model Question {
  id    String @id @default(uuid())
  gigId String
  gig   Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text  String
}

model MediaItem {
  id    String    @id @default(uuid())
  gigId String
  gig   Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type  MediaType
  url   String
}

model Order {
  id                  String         @id @default(uuid())
  gigId               String
  gig                 Gig            @relation(fields: [gigId], references: [id], onDelete: Restrict)
  clientId            String
  client              Client         @relation(fields: [clientId], references: [id])
  freelancerId        String
  freelancer          Freelancer     @relation(fields: [freelancerId], references: [id])
  payment             PaymentMethod
  note                String?        @db.VarChar(500)
  jobBrief            String?        @db.VarChar(500)
  keyResponsibilities String[]       @default([])
  status              OrderStatus    @default(ACTIVE)
  total               Int            @default(1)
  modeOfWorkingId     String?        @unique
  modeOfWorking       ModeOfWorking? @relation("OrderMode", fields: [modeOfWorkingId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@map("orders")
}

model ModeOfWorking {
  id         String      @id @default(uuid())
  order      Order?      @relation("OrderMode")
  hourlyRate HourlyRate? @relation("ModeHourlyRate")
  contract   Contract?   @relation("ModeContract")

  @@map("mode_of_workings")
}

model HourlyRate {
  id              String        @id @default(uuid())
  amount          Decimal       @db.Decimal(10, 2)
  maxAmount       Decimal       @db.Decimal(10, 2)
  modeOfWorkingId String        @unique
  mode            ModeOfWorking @relation("ModeHourlyRate", fields: [modeOfWorkingId], references: [id])

  @@map("hourly_rates")
}

model Contract {
  id              String        @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  modeOfWorkingId String        @unique
  mode            ModeOfWorking @relation("ModeContract", fields: [modeOfWorkingId], references: [id])

  @@map("contracts")
}

model Conversation {
  id        String    @id @default(uuid())
  aId       String
  bId       String
  topic     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@unique([aId, bId], name: "pair_unique")
  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  receiverId     String
  content        String       @db.VarChar(1000)
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messages")
}
