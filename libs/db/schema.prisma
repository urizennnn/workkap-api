datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RegistrationMethod {
  COMBINATION
  GOOGLE
  FACEBOOK
  APPLE
}

enum PaymentMethod {
  PAYPAL
  VISA_CARD
  MASTER_CARD
  BANK_TRANSFER
}

enum OrderStatus {
  ACTIVE
  PENDING
  COMPLETED
  LATE
  CANCELLED
}

enum PackageTier {
  BASIC
  STANDARD
  PREMIUM
}

enum GigStatus {
  ACTIVE
  PENDING
  REQUIRES_MODIFICATION
  DRAFT
  DENIED
  PAUSED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

model User {
  id                 String             @id @default(uuid())
  email              String?            @unique
  password           String?
  country            String?
  profilePictureUrl  String?
  username           String?            @unique
  fullName           String?
  registrationMethod RegistrationMethod @default(COMBINATION)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  Freelancer         Freelancer?
  Client             Client?

  @@map("users")
}

model Freelancer {
  id    String  @id @default(uuid())
  uid   String  @unique
  user  User    @relation(fields: [uid], references: [id])
  gigs  Gig[]
  Order Order[]

  @@map("freelancers")
}

model Client {
  id    String  @id @default(uuid())
  uid   String  @unique
  user  User    @relation(fields: [uid], references: [id])
  Order Order[]

  @@map("clients")
}

model Gig {
  id                  String         @id @default(uuid())
  slug                String         @unique @default(uuid())
  userId              String
  user                Freelancer     @relation(fields: [userId], references: [id])
  title               String
  mainCategory        String
  subCategory         String
  tools               String[]       @default([])
  status              GigStatus      @default(DRAFT)
  tags                String[]       @default([])
  description         String         @db.VarChar(1000)
  packages            GigPackage[]
  extras              ExtraService[]
  questions           Question[]
  media               MediaItem[]
  thirdPartyAgreement Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  Order               Order[]

  @@map("gigs")
}

model GigPackage {
  id                String      @id @default(uuid())
  gigId             String
  gig               Gig         @relation(fields: [gigId], references: [id])
  tier              PackageTier
  name              String
  description       String
  deliveryTime      Int
  customAssetDesign Boolean     @default(false)
  sourceFile        Boolean     @default(false)
  contentUpload     Boolean     @default(false)
  convertToHtmlCss  Boolean     @default(false)
  revisions         Int         @default(0)
  price             Decimal     @db.Decimal(10, 2)
  totalPrice        Decimal     @db.Decimal(10, 2)
}

model ExtraService {
  id           String  @id @default(uuid())
  gigId        String
  gig          Gig     @relation(fields: [gigId], references: [id])
  name         String
  deliveryTime Int
  price        Decimal @db.Decimal(10, 2)
}

model Question {
  id    String @id @default(uuid())
  gigId String
  gig   Gig    @relation(fields: [gigId], references: [id])
  text  String
}

model MediaItem {
  id    String    @id @default(uuid())
  gigId String
  gig   Gig       @relation(fields: [gigId], references: [id])
  type  MediaType
  url   String
}

model Order {
  id              String         @id @default(uuid())
  gigId           String
  gig             Gig            @relation(fields: [gigId], references: [id])
  clientId        String
  client          Client         @relation(fields: [clientId], references: [id])
  freelancerId    String
  freelancer      Freelancer     @relation(fields: [freelancerId], references: [id])
  payment         PaymentMethod
  note            String?        @db.VarChar(500)
  status          OrderStatus    @default(ACTIVE)
  total           Int            @default(1)
  modeOfWorkingId String?        @unique
  modeOfWorking   ModeOfWorking? @relation("OrderMode", fields: [modeOfWorkingId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("orders")
}

model ModeOfWorking {
  id         String      @id @default(uuid())
  order      Order?      @relation("OrderMode")
  hourlyRate HourlyRate? @relation("ModeHourlyRate")
  contract   Contract?   @relation("ModeContract")

  @@map("mode_of_workings")
}

model HourlyRate {
  id              String        @id @default(uuid())
  amount          Decimal       @db.Decimal(10, 2)
  maxAmount       Decimal       @db.Decimal(10, 2)
  modeOfWorkingId String        @unique
  mode            ModeOfWorking @relation("ModeHourlyRate", fields: [modeOfWorkingId], references: [id])

  @@map("hourly_rates")
}

model Contract {
  id              String        @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  modeOfWorkingId String        @unique
  mode            ModeOfWorking @relation("ModeContract", fields: [modeOfWorkingId], references: [id])

  @@map("contracts")
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String   @db.VarChar(1000)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("messages")
}
